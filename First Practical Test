#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <string.h>
#include <math.h>
#define N 3

//Atividade 1
int somatorio (int n){
  int X = 0, soma = 0, S = 0;
  for (int i = 1; i <= n; i++){
    soma = 0;
    for (int j = 1; j <= i; j++){
      soma += j;
    }
    S += soma;
  } 
return S;
}

//Atividade 2
int Tamanho_e_Caracteres (char Stg[100], int *Dig){
  int x = 0;
  for (int i = 0; i < strlen(Stg); i++){
    if (Stg[i] == '1' || Stg[i] == '2' || Stg[i] == '3' || Stg[i] == '4' || Stg[i] == '5' || Stg[i] == '6' || Stg[i] == '7' || Stg[i] == '8' || Stg[i] == '9' || Stg[i] == '0')
      x++;
  }
  *Dig = x;
  return strlen(Stg);
}

//Atividade 3
bool Matriz_Simetrica (int Matriz[N][N], int MatrizT[N][N]){
//Verificando se as matrizes são iguais
  for (int i = 0; i < N; i++){
    for (int j = 0; j < N; j++){
      if (Matriz[i][j] == MatrizT[j][i])
        return true;
      else
        return false;
    }
  }
}

//Atividade 4
int Matriz_Custos (int M[N][5], int custos, int *Maior){
  int soma = 0, MaiorC;
  for (int i = 0; i < (custos - 1); i++){
    soma = 0;
    for (int j = 0; j < 5; j++){
      soma += M[custos-1][j];
    }
  }
  for (int i = 0; i < (custos - 1); i++){
    for (int j = 0; j < 5; j++){
      if (M[custos-1][j] > MaiorC || i + j == 0)
        MaiorC = M[custos-1][j];
    }
  }
  *Maior = MaiorC;
  return soma;
}

int main() {
  srand(time(NULL));
  int op, x, n, Digitos=0, i, j, Matriz[N][N], MatrizT[N][N], Kcustos = 0, MaiorCusto = 0, Mat[n][5];
  char String [100];
  
  printf("\nMENU\n");
  printf("[0] - Sair\n");
  printf("[1] - Atividade 1\n");
  printf("[2] - Atividade 2\n");
  printf("[3] - Atividade 3\n");
  printf("[4] - Atividade 4\n");
  printf("\nEscolha uma opção: ");
  scanf("%d", &op);

  switch(op){
    case 0:
      printf("Operação encerrada!\n");
    break;
    
    case 1: //Somatorio
      //Determinando n
      printf("\nDigite o numero n: ");
      scanf("%d", &n);
      //Chamando a função
      x = somatorio(n);
      printf("\nResultado: %d", x);
    break;

    case 2: // Tamanho e digitos da string
      //Determinando a string
      printf("\nDigite a string: ");
      scanf("%s", String);
      //Chamando a função
      x = Tamanho_e_Caracteres (String, &Digitos);
      printf("\nTamanho do texto: %d\nQuantidade de digitos: %d", x, Digitos);
    break;

    case 3:
      //Criando a primeira matriz
      printf("\nMatriz:\n");
      for (i = 0; i < N; i++){
        for (j = 0; j < N; j++){
           printf("Matriz [%d %d]: ", i, j);
          scanf("%d", &Matriz[i][j]);
        }
    }
      printf("\n");
      printf("\nMatriz:\n");
      for (i = 0; i < N; i++){
        for (j = 0; j < N; j++){
          printf(" %d ",Matriz[i][j]);
        }
        printf("\n");
    }
      //Criando a matriz transposta
      printf("\nMatriz transposta:\n");
      for (i = 0; i < N; i++){
        for (j = 0; j < N; j++){
           printf("MatrizT [%d %d]: ", i, j);
          scanf("%d", &MatrizT[i][j]);
        }
    }
      printf("\n");
      printf("\nMatriz transposta:\n");
      for (i = 0; i < N; i++){
        for (j = 0; j < N; j++){
          printf(" %d ",MatrizT[i][j]);
        }
        printf("\n");
    }
      //Chamando a função
      x = Matriz_Simetrica(Matriz, MatrizT);
      if (x == true)
        printf("\nA matriz eh simetrica\n");
      else
        printf("\nA matriz nao eh simetrica\n");
    break; 

    case 4:
      //Preenchendo a matriz
      printf("\nDigite o valor do k-esimo setor que deseja verificar a soma: ");
      scanf("%d", &Kcustos);
      //Montando a matriz
      printf("\n");
      for (int i = 0; i < N; i++){
        for (int j = 0; j < 5; j++){
          Mat[i][j] = rand() % 10;
          printf("%d\t", Mat[i][j]);
        }
        printf("\n");
      }
      //Chamando a função
      x = Matriz_Custos(Mat, Kcustos, &MaiorCusto);
      printf("\nSoma dos custos: %d\nMaior custo: %d", x, MaiorCusto);
    break;
    
    default:
      printf("Operação inválida\n");
    break;
  }
  return 0;
}
