#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>
#include <time.h>
#define N 5
#define M 3

//Procedimento Questão 1A
void misterio(int vet[5], int *a, int *b) { 
  *a = *b = vet[0]; 
  for (int i=0;i<5;i++) 
    if (vet[i] < *a) 
      *a = vet[i]; 
    else if (vet[i] > *b) 
      *b = vet[i]; 
}

//Procedimento Questão 1B
void misterio1(int vet[5], int * x) { 
    *x = vet[0]; 
    for (int i=0;i<5;i++) 
      if (vet[i] < *x) 
        *x = vet[i]; 
} 
//Função Questão 1B
int misterio2(int vet[5]) { 
    int p = vet[0]; 
    for (int i=0;i<5;i++) 
      if (vet[i] > p) 
        p = vet[i]; 
    return p; 
}

/* Atividade 2
Descrição: Função que recebe dois vetores de numeros inteiros e retorna 
1 se os vetores possuírem o mesmo número de elementos múltiplos de 3, ou -1 caso contrário
Parâmetros: 2 vetores de numeros inteiros
Retorno: 1 valor inteiro referente à comparação entre os vetores
*/
int Compara_Vetores (int V1[N], int V2[N]){
//Declaração e atribuição de valor às variáveis
  int A = 0, B = 0;
//Repetição para contagem de quantos numeros do vetor sao multiplos de 3
  for (int i = 0; i < N; i++){
    if (V1[i] % 3 == 0) //Contagem do vetor 1 (Vetor A)
      A++;
    if (V2[i] % 3 == 0) //Contagem do vetor 2 (Vetor B)
      B++;
  }
//Verificação se ambos os vetores possuem a mesma quantidade de multiplos de 3
  if (A == B)
    return 1;
  else
    return -1;
}

/* Atividade 3
Descrição: Função que recebe uma string por parâmetro, retorna por valor o número de caracteres que representam dígitos de 0 a 9 e retorna por referência o número de vogais.
Parâmetros: 1 string e um ponteiro para a variável referente à quantidade de vogais
Retorno: 1 valor inteiro referente à quantidade de digitos
*/
int Verifica_String (char String[100], int *V){
//Declaração e atribuição de valor às variáveis
  int Dig = 0, Vog = 0, i;
  for (i = 0; i < 100 || String[i] != '\0'; i++){
// Verificação e contagem de digitos presentes na string
    if (String[i] == '0' || String[i] == '1' || String[i] == '2' || String[i] == '3' || String[i] == '4' || String[i] == '5' || String[i] == '6' || String[i] == '7' || String[i] == '8' || String[i] == '9')
      Dig++;
//Verificação e contagem de vogais presentes na string
    if (String[i] == 'a' || String[i] == 'A' || String[i] == 'e' || String[i] == 'E' || String[i] == 'i' || String[i] == 'I' || String[i] == 'o' || String[i] == 'O' || String[i] == 'u' || String[i] == 'U')
      Vog++;
  }
  *V = Vog;
  return Dig;
}

/* Atividade 4
Descrição: Procedimento que recebe duas matrizes de numeros inteiros  por parâmetro, calcula e mostra o produto de seus elementos ímpares e  
o número de elementos cujo os valores são menores que o valor médio de cada matriz.
Parâmetros: 2 matrizes de numeros inteiros
Retorno: N/A
*/
void Calculos_Matrizes (int MatA[M][N], int MatB[M][N]){
//Declaração e atribuição de valor às variáveis
  int PA = 1, PB = 1, somaA = 0, somaB = 0, contA = 0, contB = 0, i, j;
  float mediaA, mediaB;
  for (i = 0; i < M; i++){
    for (j = 0; j < N; j++){
//Verificação e multiplicação dos numeros impares da primeira matriz
      if (MatA[i][j] % 2 == 1)
        PA *= MatA[i][j];
//Verificação e multipliação dos numeros impares da segunda matriz
      if (MatB[i][j] % 2 == 1)
        PB *= MatB[i][j];
    }
  }
//Verificação da media dos valores das matrizes
  for (i = 0; i < M; i++){
    for (j = 0; j < N; j++){
      somaA += MatA[i][j];
      somaB += MatB[i][j];
    }
  }
  mediaA = somaA / (M * N);
  mediaB = somaB / (M * N);
//Contagem de valores que são menores que as medias das matrizes
  for (i = 0; i < M; i++){
    for (j = 0; j < N; j++){
      if (MatA[i][j] < mediaA)
        contA++;
      if (MatB[i][j] < mediaB)
        contB++;
    }
  } 
//Mostrando os resultados desejados
  printf("\nProduto da Primeira Matriz: %d\nProduto da Segunda Matriz: %d\nValores menores que o valor medio da Primeira Matriz: %d\nValores menores que o valor medio da Segunda Matriz: %d\n", PA, PB, contA, contB);
}

/* Atividade 5
Descrição: 
Parâmetros: 1 matriz de numeros inteiros
Retorno: N/A
*/
void Inverte_Matriz (int Mat[N][2]){
//Declaração e atribuição de valor às variáveis
  int i, j, MatI[N][2];
//Invertendo os valores da matriz os colocando em outra matriz
  for (i = 0; i < N; i++){
    for (j = 0; j < 2; j++){
      MatI[i][j] = Mat[i][j];
    }
  }
//Mostrando a matriz invertida
  printf("\nMatriz invertida:\n");
  for (i = N-1; i >= 0; i--){
    for (j = 0; j < 2; j++){
      printf("%d\t", MatI[i][j]);
    }
    printf("\n"); //Espaço entre linhas
  }
}

int main() {
//Declaração a atribuição de valor às variáveis
  srand(time(NULL));
  int k[] = {6, 2, 3, 4, 5}, kb[] = {4, 7, 1, 4, 8}, VetorA[N] = {3, 5, 6, 12, 9}, VetorB[N] = {2, 4, 12, 6, 7};
  int op, x, xb = misterio2(kb), y, Qv = 0, i, j, Mat1[M][N], Mat2[M][N], Matriz[N][2];
  char St[100];
  
//Menu
  do{
    printf("\nMENU DE OPCOES\n");
    printf("[0] - Encerra o Programa\n");
    printf("[1] - Atividade 1A\n");
    printf("[2] - Atividade 1B\n");
    printf("[3] - Atividade 2\n");
    printf("[4] - Atividade 3\n");
    printf("[5] - Atividade 4\n");
    printf("[6] - Atividade 5\n");
    printf("Digite o numero da opcao desejada:\t");
    scanf("%d", &op);
  //Definição dos cases para cada atividade
    switch (op){
    case 0: //Sai do programa
      printf("\nPrograma Encerrado!");
    break;
      
    case 1: //Atividade 1A
      misterio(k, &x, &y); 
    if (x > y) 
      printf("\nOla AAA %d %d\n", x, y); 
    else 
      printf("\nOla BBB %d %d\n", y, x); 
    break;
      
    case 2: //Atividade 1B 
      misterio1(kb, &y); 
      printf("\n%d %d\n", xb, y);
    break;
    case 3: //Atividade 2
      x = Compara_Vetores(VetorA, VetorB);
      printf("\n%d\n", x);
    break;
      
    case 4: //Atividade 3
      //Definição da string
      printf("\nDigite o valor da string: ");
      scanf("%s", &St[100]);
      //Chamando a função
      x = Verifica_String(St, &Qv);
      printf("\nDigitos: %d\nVogais: %d\n", x, Qv);
    break;
      
    case 5: //Atividade 4
      //Definição dos valores da primeira matriz
      printf("\nDigite o numero referente a como deseja preencher a primeira matriz\n");
      printf("\n[0] - Preenchimento Aleatorio\n[Outro valor] - Preenchimento Manual\n");
      printf("\nOpcao:\t");
      scanf("%d", &x);
      //Preenchimento da primeira matriz de forma aleatoria
      if(x == 0){
        for(i = 0; i < M; i++){
          for(j = 0; j < N; j++){
            Mat1[i][j] = 1 + rand () % 8;
          }
        }
      }
      //Preenchimento da primeira matriz de forma manual
      else{
        for(i = 0; i < M; i++){
          for(j = 0; j < N; j++){
            printf("\nPosicao [%d %d]", i, j);
            scanf("%d", &Mat1[i][j]);
          }
        }
      }
      //Definição dos valores da segunda matriz
      printf("\nDigite o numero referente a como deseja preencher a segunda matriz\n");
      printf("\n[0] - Preenchimento Aleatorio\n[Outro valor] - Preenchimento Manual\n");
      printf("\nOpcao:\t");
      scanf("%d", &x);
      //Preenchimento da segunda matriz de forma aleatoria
      if(x == 0){
        for(i = 0; i < M; i++){
          for(j = 0; j < N; j++){
            Mat2[i][j] = 1 + rand () % 8;
          }
        }
      }
      //Preenchimento da segunda matriz de forma manual
      else{
        for(i = 0; i < M; i++){
          for(j = 0; j < N; j++){
            printf("\nPosicao [%d %d]", i, j);
            scanf("%d", &Mat2[i][j]);
          }
        }
      }
      //Mostrando a primeira matriz
      printf("\nMatriz 1:\n");
      for(i = 0; i < M; i++){
        for(j = 0; j < N; j++){
          printf("%d\t", Mat1[i][j]);
        }
        printf("\n"); //Espaço entre as linhas
      }
      printf("\n"); //Espaço entre as matrizes
      //Mostrando a segunda matriz
      printf("\nMatriz 2:\n");
      for(i = 0; i < M; i++){
        for(j = 0; j < N; j++){
          printf("%d\t", Mat2[i][j]);
        }
        printf("\n"); //Espaço entre as linhas
      }
      //Chamando o procedimento
      Calculos_Matrizes(Mat1, Mat2);
    break;
      
    case 6: //Atividade 5
      //Definição dos valores da matriz
      printf("\nDigite o numero referente a como deseja preencher a matriz\n");
      printf("\n[0] - Preenchimento Aleatorio\n[Outro valor] - Preenchimento Manual\n");
      printf("\nOpcao:\t");
      scanf("%d", &x);
      //Preenchimento da matriz de forma aleatoria
      if(x == 0){
        for(i = 0; i < N; i++){
          for(j = 0; j < 2; j++){
            Matriz[i][j] = rand () % 10;
          }
        }
      }
      //Preenchimento da primeira matriz de forma manual
      else{
        for(i = 0; i < N; i++){
          for(j = 0; j < 2; j++){
            printf("\nPosicao [%d %d]", i, j);
            scanf("%d", &Matriz[i][j]);
          }
        }
      }
      //Mostrando a matriz
      printf("\nMatriz:\n");
      for(i = 0; i < N; i++){
        for(j = 0; j < 2; j++){
          printf("%d\t", Matriz[i][j]);
        }
        printf("\n"); //Espaço entre as linhas
      }
      //Chamando o procedimento
      Inverte_Matriz(Matriz);
    break;
      
    default: //Demais opções (inválidas)
      printf("\nOpcao Invalida!\n");
    break; 
    }
  }while (op != 0);
  return 0;
}
